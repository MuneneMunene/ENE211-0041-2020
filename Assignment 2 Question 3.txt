/* (i) In inheritance is a fundamental concept in object-oriented programming that allows us to create new classes that are modified versions of existing classes.
In the scenario you described, we can use inheritance to create a base class for all students that includes common properties like name, age, and ID.
We can then create derived classes for each type of student, such as ICT, Law, and Business.
These derived classes will inherit the properties and methods of the base class as well as their own unique properties and methods.
Furthermore, because BSC-IT is divided into three stages, another level of inheritance can be used to create a base class for BSC-IT students that contains the properties and methods shared by all three stages. 
Then, for each stage of BSC-IT, we can create three derived classes that derive from the BSC-IT base class but have their own distinct properties and methods.*/

#include <iostream>
using namespace std;

// Course is the parent class
class Course {
    protected:
        string courseName;

    public:
        Course(string name) : courseName(name) {}
        virtual void print() = 0;
};

// Child classes of Course
class ICT : public Course {
    public:
        ICT(string name) : Course(name) {}
        void print() { cout << "Course: " << courseName << " - Field: ICT\n"; }
};

class Law : public Course {
    public:
        Law(string name) : Course(name) {}
        void print() { cout << "Course: " << courseName << " - Field: Law\n"; }
};

class Business : public Course {
    public:
        Business(string name) : Course(name) {}
        void print() { cout << "Course: " << courseName << " - Field: Business\n"; }
};

// Child classes of ICT
class Cert : public ICT {
    public:
        Cert(string name) : ICT(name) {}
        void print() { cout << "Course: " << courseName << " - Field: ICT - Level: Certificate\n"; }
};

class Dip : public ICT {
    public:
        Dip(string name) : ICT(name) {}
        void print() { cout << "Course: " << courseName << " - Field: ICT - Level: Diploma\n"; }
};

// Child class of ICT and Parent class of BSc-IT
class BSc_IT : public ICT {
    public:
        BSc_IT(string name) : ICT(name) {}
        void print() { cout << "Course: " << courseName << " - Field: ICT - Level: Degree - Type: BSc-IT\n"; }
};

// Child classes of BSc-IT
class Stage_1 : public BSc_IT {
    public:
        Stage_1(string name) : BSc_IT(name) {}
        void print() { cout << "Course: " << courseName << " - Field: ICT - Level: Degree - Type: BSc-IT - Stage: 1\n"; }
};

class Stage_2 : public BSc_IT {
    public:
        Stage_2(string name) : BSc_IT(name) {}
        void print() { cout << "Course: " << courseName << " - Field: ICT - Level: Degree - Type: BSc-IT - Stage: 2\n"; }
};

class Stage_3 : public BSc_IT {
    public:
        Stage_3(string name) : BSc_IT(name) {}
        void print() { cout << "Course: " << courseName << " - Field: ICT - Level: Degree - Type: BSc-IT - Stage: 3\n"; }
};

int main() {
    // Create objects of the different classes and call their functions
    Course *c1 = new ICT("Information and Communication Technology");
    c1->print();
    
    Course *c2 = new Law("Legal Studies");
    c2->print();
    
    Course *c3 = new Business("Business Administration");
    c3->print();
    
    Course *c4 = new Cert("Certificate in Information Technology");
    c4->print();
    
    Course *c5 = new Dip("Diploma in Information Technology");
    c5->print();
    
    Course *c6 = new BSc_IT("BSc in Information Technology");
    c6->print();
    
    Course *c7 = new Stage_1("Programming I");
    c7->print();
    
    Course *c8 = new Stage_2("Data Structures and Algorithms");
    c8->print();
    
    Course *c9 = new Stage_3("Software Engineering");
    c9->print();
    
    // Delete the dynamically allocated memory
    delete c1;
    delete c2;
    delete c3;
    delete c4;
    delete c5;
    delete c6;
    delete c7;
    delete c8;
    delete c9;
    
    return 0;
}
